const API_KEY = "037b6dda3ea6bd588dd48b35ae88f478"; // Thay b·∫±ng API key c·ªßa b·∫°n
      const DEFAULT_CITY = "Da Nang";

      // Weather icons mapping
      const weatherIcons = {
        "01d": "‚òÄÔ∏è",
        "01n": "üåô",
        "02d": "‚õÖ",
        "02n": "‚òÅÔ∏è",
        "03d": "‚òÅÔ∏è",
        "03n": "‚òÅÔ∏è",
        "04d": "‚òÅÔ∏è",
        "04n": "‚òÅÔ∏è",
        "09d": "üåßÔ∏è",
        "09n": "üåßÔ∏è",
        "10d": "üå¶Ô∏è",
        "10n": "üåßÔ∏è",
        "11d": "‚õàÔ∏è",
        "11n": "‚õàÔ∏è",
        "13d": "‚ùÑÔ∏è",
        "13n": "‚ùÑÔ∏è",
        "50d": "üå´Ô∏è",
        "50n": "üå´Ô∏è",
      };

      // Navigation functions
      function toggleMobileMenu() {
        const navMenu = document.getElementById("navMenu");
        navMenu.classList.toggle("active");
      }

      function showSection(sectionName, navLinkElement) {
        // Hide all sections
        const sections = document.querySelectorAll(".section");
        sections.forEach((section) => {
          section.style.display = "none";
        });

        // Show selected section
        const targetSection = document.getElementById(sectionName + "Section");
        if (targetSection) {
            targetSection.style.display = "block";
        } else {
            // N·∫øu b·∫°n ƒëang ·ªü trang kh√°c (v√≠ d·ª• dubao.html) v√† g·ªçi showSection t·ª´ trang ƒë√≥,
            // section c√≥ th·ªÉ kh√¥ng t·ªìn t·∫°i. ƒêi·ªÅu n√†y l√† b√¨nh th∆∞·ªùng n·∫øu h√†m n√†y ƒë∆∞·ª£c d√πng chung.
            console.warn(`Section with ID '${sectionName}Section' not found on the current page.`);
        }

        // Update active nav link
        const navLinks = document.querySelectorAll(".nav-link");
        navLinks.forEach((link) => {
          link.classList.remove("active");
        });
        if (navLinkElement) { // Ch·ªâ th√™m class active n·∫øu navLinkElement ƒë∆∞·ª£c cung c·∫•p
            navLinkElement.classList.add("active");
        }

        // Close mobile menu
        const mobileMenu = document.getElementById("navMenu");
        if (mobileMenu) {
            mobileMenu.classList.remove("active");
        }
      }

      // Smart suggestions based on weather
      function getWeatherSuggestions(weather, temp, humidity, windSpeed) {
        const suggestions = [];
        const condition = weather.toLowerCase();

        // Temperature based suggestions
        if (temp <= 10) {
          suggestions.push({ icon: "üß•", text: "M·∫∑c √°o ·∫•m, tr·ªùi l·∫°nh!" });
          suggestions.push({ icon: "üß§", text: "ƒêeo gƒÉng tay ƒë·ªÉ gi·ªØ ·∫•m tay" });
        } else if (temp >= 30) {
          suggestions.push({ icon: "üå°Ô∏è", text: "Tr·ªùi n√≥ng, u·ªëng nhi·ªÅu n∆∞·ªõc!" });
          suggestions.push({ icon: "üëï", text: "M·∫∑c qu·∫ßn √°o m√°t m·∫ª" });
        }

        // Weather condition suggestions
        if (condition.includes("rain") || condition.includes("shower")) {
          suggestions.push({ icon: "‚òî", text: "Mang theo √¥ ho·∫∑c √°o m∆∞a" });
          suggestions.push({ icon: "üë¢", text: "ƒêi gi√†y ch·ªëng n∆∞·ªõc" });
        }

        if (condition.includes("snow")) {
          suggestions.push({ icon: "‚ùÑÔ∏è", text: "Mang gƒÉng tay v√† m≈© ·∫•m" });
          suggestions.push({ icon: "üß£", text: "Qu√†ng khƒÉn gi·ªØ ·∫•m" });
        }

        if (condition.includes("thunderstorm")) {
          suggestions.push({ icon: "‚õàÔ∏è", text: "Tr√°nh ra ngo√†i n·∫øu c√≥ th·ªÉ" });
          suggestions.push({ icon: "üè†", text: "·ªû trong nh√† ƒë·ªÉ an to√†n" });
        }

        // Humidity based suggestions
        if (humidity > 80) {
          suggestions.push({
            icon: "üíß",
            text: "ƒê·ªô ·∫©m cao, c·∫©n th·∫≠n v·ªõi ƒë·ªì ƒëi·ªán t·ª≠",
          });
        }

        // Wind speed based suggestions
        if (windSpeed > 20) {
          suggestions.push({
            icon: "üå™Ô∏è",
            text: "Gi√≥ m·∫°nh, c·∫©n th·∫≠n khi ra ngo√†i",
          });
        }

        return suggestions;
      }

      // Format timestamp to readable date
      function formatDateTime(timestamp) {
        const date = new Date(timestamp * 1000);
        return date.toLocaleString("vi-VN", {
          weekday: "long",
          year: "numeric",
          month: "long",
          day: "numeric",
          hour: "2-digit",
          minute: "2-digit",
        });
      }

      /**
       * C·∫≠p nh·∫≠t h√¨nh n·ªÅn c·ªßa body d·ª±a tr√™n d·ªØ li·ªáu th·ªùi ti·∫øt.
       * @param {object} weatherData - D·ªØ li·ªáu th·ªùi ti·∫øt t·ª´ API.
       */
      function setDynamicBackground(weatherData) {
        const body = document.body;
        // Danh s√°ch t·∫•t c·∫£ c√°c l·ªõp CSS th·ªùi ti·∫øt c√≥ th·ªÉ c√≥ tr√™n body
        const existingWeatherClasses = ['sunny', 'cloudy', 'rainy', 'snowy', 'stormy', 'clear-night', 'misty', 'hot'];

        // 1. X√≥a t·∫•t c·∫£ c√°c l·ªõp th·ªùi ti·∫øt hi·ªán c√≥ kh·ªèi body
        existingWeatherClasses.forEach(cls => {
            if (body.classList.contains(cls)) {
                body.classList.remove(cls);
            }
        });

        // 2. X√°c ƒë·ªãnh l·ªõp CSS th·ªùi ti·∫øt m·ªõi d·ª±a tr√™n d·ªØ li·ªáu API
        let newWeatherClass = '';

        if (!weatherData || !weatherData.weather || !weatherData.weather[0] || !weatherData.main) {
            console.warn("D·ªØ li·ªáu th·ªùi ti·∫øt kh√¥ng ƒë·ªß ƒë·ªÉ x√°c ƒë·ªãnh h√¨nh n·ªÅn. S·ª≠ d·ª•ng n·ªÅn m·∫∑c ƒë·ªãnh.");
            // Body s·∫Ω t·ª± ƒë·ªông s·ª≠ d·ª•ng n·ªÅn m·∫∑c ƒë·ªãnh v√¨ kh√¥ng c√≥ class n√†o ƒë∆∞·ª£c th√™m
            return;
        }

        const condition = weatherData.weather[0].main.toLowerCase(); // V√≠ d·ª•: "clear", "clouds", "rain"
        const icon = weatherData.weather[0].icon; // V√≠ d·ª•: "01d" (ng√†y), "01n" (ƒë√™m)
        const tempCelsius = weatherData.main.temp; // API tr·∫£ v·ªÅ Celsius do 'units=metric'

        // ∆Øu ti√™n ki·ªÉm tra ban ƒë√™m tr∆∞·ªõc d·ª±a v√†o icon t·ª´ API
        if (icon && icon.endsWith('n')) { // Ki·ªÉm tra n·∫øu l√† ban ƒë√™m
            if (condition.includes('clear')) newWeatherClass = 'clear-night';
            else if (condition.includes('cloud')) newWeatherClass = 'cloudy'; // C√≥ th·ªÉ t·∫°o 'cloudy-night'
            else if (condition.includes('rain') || condition.includes('drizzle')) newWeatherClass = 'rainy';
            else if (condition.includes('snow')) newWeatherClass = 'snowy';
            else if (condition.includes('thunderstorm')) newWeatherClass = 'stormy';
            else if (condition.includes('mist') || condition.includes('fog') || condition.includes('haze') || condition.includes('smoke') || condition.includes('sand') || condition.includes('dust') || condition.includes('ash') || condition.includes('squall') || condition.includes('tornado')) newWeatherClass = 'misty';
            else newWeatherClass = 'clear-night'; // M·∫∑c ƒë·ªãnh cho c√°c ƒëi·ªÅu ki·ªán ban ƒë√™m kh√°c
        } else { // Ban ng√†y
            if (tempCelsius > 33) newWeatherClass = 'hot'; // Ng∆∞·ª°ng nhi·ªát ƒë·ªô cho 'hot'
            else if (condition.includes('clear')) newWeatherClass = 'sunny';
            else if (condition.includes('cloud')) newWeatherClass = 'cloudy';
            else if (condition.includes('rain') || condition.includes('drizzle')) newWeatherClass = 'rainy';
            else if (condition.includes('snow')) newWeatherClass = 'snowy';
            else if (condition.includes('thunderstorm')) newWeatherClass = 'stormy';
            else if (condition.includes('mist') || condition.includes('fog') || condition.includes('haze') || condition.includes('smoke') || condition.includes('sand') || condition.includes('dust') || condition.includes('ash') || condition.includes('squall') || condition.includes('tornado')) newWeatherClass = 'misty';
            else newWeatherClass = 'sunny'; // M·∫∑c ƒë·ªãnh cho c√°c ƒëi·ªÅu ki·ªán ban ng√†y kh√°c
        }

        // 3. Th√™m l·ªõp CSS th·ªùi ti·∫øt m·ªõi v√†o body
        if (newWeatherClass) {
            body.classList.add(newWeatherClass);
            console.log(`Applied background class: ${newWeatherClass}`);
        } else {
            // N·∫øu kh√¥ng c√≥ l·ªõp n√†o ph√π h·ª£p, body s·∫Ω s·ª≠ d·ª•ng n·ªÅn m·∫∑c ƒë·ªãnh ƒë√£ khai b√°o trong CSS
            console.log("No specific weather class applied, using default body background.");
        }
      }


      // Update weather UI
      function updateWeatherUI(data) {
        const weatherContent = document.getElementById("weatherContent");
        const weather = data.weather[0];
        const temp = Math.round(data.main.temp);
        const suggestions = getWeatherSuggestions(
          weather.description,
          temp,
          data.main.humidity,
          data.wind.speed
        );

        // C·∫≠p nh·∫≠t n·ªÅn ƒë·ªông
        setDynamicBackground(data);

        const html = `
          <div class="weather-card">
            <div class="current-weather">
              <div class="weather-main">
                <div class="location">
                  üìç ${data.name}, ${data.sys.country}
                </div>
                <div class="datetime">${formatDateTime(data.dt)}</div>
                <div class="temperature">${temp}¬∞C</div>
                <div class="description">${weather.description}</div>
                <div class="feels-like">C·∫£m gi√°c nh∆∞ ${Math.round(
                  data.main.feels_like
                )}¬∞C</div>
              </div>
              <div class="weather-icon-container">
                <div class="weather-icon">${
                  weatherIcons[weather.icon] || "üå§Ô∏è"
                }</div>
              </div>
            </div>
            
            <div class="weather-details">
              <div class="detail-item">
                <span class="detail-icon">üíß</span>
                <div class="detail-label">ƒê·ªô ·∫©m</div>
                <div class="detail-value">${data.main.humidity}%</div>
              </div>
              <div class="detail-item">
                <span class="detail-icon">üí®</span>
                <div class="detail-label">T·ªëc ƒë·ªô gi√≥</div>
                <div class="detail-value">${Math.round(
                  data.wind.speed
                )} m/s</div>
              </div>
              <div class="detail-item">
                <span class="detail-icon">üå°Ô∏è</span>
                <div class="detail-label">√Åp su·∫•t</div>
                <div class="detail-value">${data.main.pressure} hPa</div>
              </div>
            </div>

            <div class="suggestions">
              <h2 class="suggestions-title">G·ª£i √Ω cho b·∫°n</h2>
              <div class="suggestions-grid">
                ${suggestions
                  .map(
                    (suggestion) => `
                  <div class="suggestion-item">
                    <span class="suggestion-icon">${suggestion.icon}</span>
                    <div class="suggestion-text">${suggestion.text}</div>
                  </div>
                `
                  )
                  .join("")}
              </div>
            </div>
          </div>
        `;

        weatherContent.innerHTML = html;
      }

      // Fetch weather data
      async function getWeather(city) {
        const weatherContent = document.getElementById("weatherContent");
        weatherContent.innerHTML = `
          <div class="loading">
            <div class="loading-spinner"></div>
            <p>ƒêang t·∫£i th√¥ng tin th·ªùi ti·∫øt...</p>
          </div>
        `;

        try {
          const response = await fetch(
            `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&lang=vi&appid=${API_KEY}`
          );

          if (!response.ok) {
            throw new Error("Kh√¥ng t√¨m th·∫•y th√†nh ph·ªë");
          }

          const data = await response.json();
          updateWeatherUI(data);
        } catch (error) {
          weatherContent.innerHTML = `
            <div class="error">
              <h2>‚ùå L·ªói</h2>
              <p>${error.message}</p>
            </div>
          `;
          // ƒê·∫∑t l·∫°i n·ªÅn v·ªÅ m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói
          setDynamicBackground(null);
        }
      }

      // Event listeners
      document.addEventListener("DOMContentLoaded", () => {
        getWeather(DEFAULT_CITY);

        // Set active link for current page
        const homeNavLink = Array.from(document.querySelectorAll('.nav-link')).find(link => link.href.includes('trangchu.html') || link.textContent.trim() === 'Trang ch·ªß');
        if (homeNavLink) showSection('home', homeNavLink);


        const cityInput = document.getElementById("cityInput");
        cityInput.addEventListener("keypress", (e) => {
          if (e.key === "Enter" && cityInput.value.trim()) {
            getWeather(cityInput.value.trim());
          }
        });

        // Temperature unit toggle
        const tempUnitToggle = document.getElementById("tempUnitToggle");
        tempUnitToggle.addEventListener("change", () => {
          const isFahrenheit = tempUnitToggle.checked;
          // Convert all temperature displays
          const temps = document.querySelectorAll(".temperature");
          temps.forEach((temp) => {
            const currentTemp = parseFloat(temp.textContent);
            if (isFahrenheit) {
              temp.textContent = `${Math.round((currentTemp * 9) / 5 + 32)}¬∞F`;
            } else {
              temp.textContent = `${Math.round(
                ((currentTemp - 32) * 5) / 9
              )}¬∞C`;
            }
          });
        });

        // Language selection
        const languageSelect = document.getElementById("languageSelect");
        languageSelect.addEventListener("change", (e) => {
          const lang = e.target.value;
          // Implement language change logic here
          // You'll need to store translations and update UI text
        });
      });