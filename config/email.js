/**
 * Email Configuration
 * 
 * This file handles email notifications using Nodemailer.
 */

const nodemailer = require('nodemailer');
const schedule = require('node-schedule');
const db = require('../models/sequelize');
const config = require('./index');
const sequelize = db.sequelize;

// C·∫•u h√¨nh transporter cho Nodemailer
const transporter = nodemailer.createTransport({
    host: 'smtp.gmail.com',
    port: 465,
    secure: true, // S·ª≠ d·ª•ng SSL/TLS cho port 465
    auth: {
        user: process.env.EMAIL_USER || 'quangluan03052000@gmail.com', // C·∫ßn c·∫•u h√¨nh trong .env
        pass: process.env.EMAIL_PASSWORD // PH·∫¢I s·ª≠ d·ª•ng App Password cho Gmail
    },
    tls: {
        // Kh√¥ng y√™u c·∫ßu x√°c th·ª±c ch·ª©ng ch·ªâ - ch·ªâ d√πng trong m√¥i tr∆∞·ªùng ph√°t tri·ªÉn
        rejectUnauthorized: false
    }
});

// Ki·ªÉm tra k·∫øt n·ªëi email
const verifyEmailConnection = async () => {
    try {
        await transporter.verify();
        if (process.env.NODE_ENV !== 'production') {
            console.log('K·∫øt n·ªëi email th√†nh c√¥ng. S·∫µn s√†ng g·ª≠i th√¥ng b√°o.');
        }
        return true;
    } catch (error) {
        console.error('L·ªói k·∫øt n·ªëi email:', error);
        return false;
    }
};

// G·ª≠i email th√¥ng b√°o th·ªùi ti·∫øt h√†ng ng√†y
const sendDailyWeatherEmail = async (user, weatherData) => {
    try {
        // T√¨m c√†i ƒë·∫∑t th√¥ng b√°o email c·ªßa ng∆∞·ªùi d√πng
        const emailNotification = await db.EmailNotification.findOne({
            where: { userId: user.id, dailyEnabled: true }
        });
        
        if (!emailNotification) {
            return;
        }

        // T·∫°o l·ªùi khuy√™n d·ª±a tr√™n ƒëi·ªÅu ki·ªán th·ªùi ti·∫øt
        let weatherAdvice = '';
        let weatherIcon = '‚òÄÔ∏è';
        
        if (weatherData.condition.includes('m∆∞a') || weatherData.condition.includes('rain')) {
            weatherAdvice = 'H√¥m nay c√≥ m∆∞a, b·∫°n n√™n mang theo √¥ ho·∫∑c √°o m∆∞a khi ra ngo√†i.';
            weatherIcon = 'üåßÔ∏è';
        } else if (weatherData.temperature > 32) {
            weatherAdvice = 'Nhi·ªát ƒë·ªô h√¥m nay kh√° cao, h√£y u·ªëng nhi·ªÅu n∆∞·ªõc v√† tr√°nh ra ngo√†i v√†o gi·ªù tr∆∞a n·∫Øng g·∫Øt.';
            weatherIcon = 'üî•';
        } else if (weatherData.temperature < 15) {
            weatherAdvice = 'Th·ªùi ti·∫øt h√¥m nay kh√° l·∫°nh, h√£y m·∫∑c ·∫•m khi ra ngo√†i.';
            weatherIcon = '‚ùÑÔ∏è';
        } else if (weatherData.humidity > 80) {
            weatherAdvice = 'ƒê·ªô ·∫©m cao h√¥m nay, c√≥ th·ªÉ g√¢y c·∫£m gi√°c n√≥ng b·ª©c, h√£y m·∫∑c trang ph·ª•c tho√°ng m√°t.';
            weatherIcon = 'üíß';
        } else if (weatherData.wind > 30) {
            weatherAdvice = 'Gi√≥ m·∫°nh h√¥m nay, h√£y c·∫©n th·∫≠n khi di chuy·ªÉn ngo√†i tr·ªùi.';
            weatherIcon = 'üí®';
        } else {
            weatherAdvice = 'Th·ªùi ti·∫øt h√¥m nay kh√° l√Ω t∆∞·ªüng, th√≠ch h·ª£p cho c√°c ho·∫°t ƒë·ªông ngo√†i tr·ªùi.';
        }
        
        // T·∫°o g·ª£i √Ω trang ph·ª•c
        let clothingTip = '';
        if (weatherData.temperature > 30) {
            clothingTip = 'N√™n m·∫∑c qu·∫ßn √°o nh·∫π, tho√°ng m√°t v√† mang theo n∆∞·ªõc u·ªëng.';
        } else if (weatherData.temperature > 25) {
            clothingTip = 'Th·ªùi ti·∫øt d·ªÖ ch·ªãu, trang ph·ª•c nh·∫π nh√†ng l√† ph√π h·ª£p.';
        } else if (weatherData.temperature > 20) {
            clothingTip = 'C√≥ th·ªÉ m√°t v√†o bu·ªïi s√°ng/t·ªëi, n√™n mang theo √°o kho√°c m·ªèng.';
        } else if (weatherData.temperature > 15) {
            clothingTip = 'Th·ªùi ti·∫øt m√°t m·∫ª, n√™n m·∫∑c √°o d√†i tay ho·∫∑c √°o kho√°c nh·∫π.';
        } else {
            clothingTip = 'Th·ªùi ti·∫øt l·∫°nh, n√™n m·∫∑c √°o ·∫•m khi ra ngo√†i.';
        }

        const mailOptions = {
            from: `"Weathery App" <${process.env.EMAIL_USER || 'quangluan03052000@gmail.com'}>`,
            to: emailNotification.email || user.email,
            subject: `${weatherIcon} Th·ªùi ti·∫øt h√¥m nay: ${weatherData.condition} | ${weatherData.temperature}¬∞C`,
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e0e0e0; border-radius: 10px; background-color: #ffffff;">
                    <div style="text-align: center; margin-bottom: 20px;">
                        <h2 style="color: #4ecdc4; margin: 0;">D·ª± b√°o th·ªùi ti·∫øt h√¥m nay</h2>
                        <p style="color: #888; font-size: 14px;">${new Date().toLocaleDateString('vi-VN', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</p>
                    </div>
                    
                    <div style="background: linear-gradient(135deg, #4ecdc4, #45b7d1); color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; text-align: center;">
                        <div style="font-size: 36px; margin-bottom: 10px;">${weatherIcon}</div>
                        <div style="font-size: 28px; font-weight: bold;">${weatherData.temperature}¬∞C</div>
                        <div style="font-size: 18px; margin-top: 5px;">${weatherData.condition}</div>
                    </div>
                    
                    <div style="background-color: #f9f9f9; padding: 15px; border-radius: 10px; margin-bottom: 20px;">
                        <h3 style="margin-top: 0; color: #333; border-bottom: 1px solid #e0e0e0; padding-bottom: 10px;">Chi ti·∫øt th·ªùi ti·∫øt</h3>
                        <div style="display: flex; justify-content: space-between; flex-wrap: wrap;">
                            <div style="flex: 1; min-width: 120px; margin: 5px; text-align: center;">
                                <div style="font-size: 14px; color: #888;">ƒê·ªô ·∫©m</div>
                                <div style="font-size: 16px; font-weight: bold;">${weatherData.humidity}%</div>
                            </div>
                            <div style="flex: 1; min-width: 120px; margin: 5px; text-align: center;">
                                <div style="font-size: 14px; color: #888;">Gi√≥</div>
                                <div style="font-size: 16px; font-weight: bold;">${weatherData.wind} km/h</div>
                            </div>
                        </div>
                    </div>
                    
                    <div style="background-color: #fff8e1; padding: 15px; border-radius: 10px; margin-bottom: 20px; border-left: 4px solid #ffd54f;">
                        <h3 style="margin-top: 0; color: #333;">L·ªùi khuy√™n h√¥m nay</h3>
                        <p>${weatherAdvice}</p>
                        <p><strong>G·ª£i √Ω trang ph·ª•c:</strong> ${clothingTip}</p>
                    </div>
                    
                    <div style="text-align: center; margin-top: 30px;">
                        <a href="${config.app.baseUrl}/dubao.html" style="background-color: #4ecdc4; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; font-weight: bold;">Xem d·ª± b√°o chi ti·∫øt</a>
                    </div>
                    
                    <p style="font-size: 12px; color: #888; margin-top: 30px; text-align: center; border-top: 1px solid #e0e0e0; padding-top: 20px;">
                        ƒê√¢y l√† email t·ª± ƒë·ªông t·ª´ ·ª©ng d·ª•ng Weathery. 
                        <a href="${config.app.baseUrl}/thongbao.html" style="color: #4ecdc4;">Thay ƒë·ªïi c√†i ƒë·∫∑t th√¥ng b√°o</a>
                    </p>
                </div>
            `
        };

        await transporter.sendMail(mailOptions);
        console.log(`ƒê√£ g·ª≠i email th·ªùi ti·∫øt h√†ng ng√†y cho ${user.email}`);
    } catch (error) {
        console.error(`L·ªói khi g·ª≠i email th·ªùi ti·∫øt h√†ng ng√†y cho ${user.email}:`, error);
    }
};

// G·ª≠i email c·∫£nh b√°o th·ªùi ti·∫øt kh·∫Øc nghi·ªát
const sendSevereWeatherAlert = async (user, alertData) => {
    try {
        // T√¨m c√†i ƒë·∫∑t th√¥ng b√°o email c·ªßa ng∆∞·ªùi d√πng
        const emailNotification = await db.EmailNotification.findOne({
            where: { userId: user.id, severeWeatherEnabled: true }
        });
        
        if (!emailNotification) {
            return;
        }

        // Ki·ªÉm tra xem lo·∫°i c·∫£nh b√°o c√≥ ƒë∆∞·ª£c b·∫≠t kh√¥ng
        const alertType = alertData.type; // 'storm', 'heavy-rain', 'extreme-heat', 'fog'
        if (!emailNotification.severeWeatherTypes.includes(alertType)) {
            return;
        }

        const alertTitles = {
            'storm': 'C·∫¢NH B√ÅO B√ÉO',
            'heavy-rain': 'C·∫¢NH B√ÅO M∆ØA L·ªöN',
            'extreme-heat': 'C·∫¢NH B√ÅO N·∫ÆNG N√ìNG',
            'fog': 'C·∫¢NH B√ÅO S∆Ø∆†NG M√ô'
        };

        const alertIcons = {
            'storm': '‚õàÔ∏è',
            'heavy-rain': 'üåßÔ∏è',
            'extreme-heat': 'üî•',
            'fog': 'üå´Ô∏è'
        };

        // T·∫°o h∆∞·ªõng d·∫´n an to√†n d·ª±a tr√™n lo·∫°i c·∫£nh b√°o
        let safetyInstructions = '';
        let emergencyContacts = '';
        
        switch(alertType) {
            case 'storm':
                safetyInstructions = `
                    <li>·ªû trong nh√† v√† tr√°nh xa c·ª≠a s·ªï</li>
                    <li>Chu·∫©n b·ªã ƒë√®n pin, radio ch·∫°y pin v√† c√°c v·∫≠t d·ª•ng kh·∫©n c·∫•p</li>
                    <li>S·∫°c ƒë·∫ßy ƒëi·ªán tho·∫°i v√† c√°c thi·∫øt b·ªã ƒëi·ªán t·ª≠</li>
                    <li>Chu·∫©n b·ªã n∆∞·ªõc u·ªëng v√† th·ª±c ph·∫©m d·ª± tr·ªØ</li>
                    <li>N·∫øu ·ªü ngo√†i, t√¨m n∆°i tr√∫ ·∫©n an to√†n v√† tr√°nh c√°c khu v·ª±c c√≥ c√¢y cao, c·ªôt ƒëi·ªán</li>
                `;
                emergencyContacts = 'C·ª©u h·ªô: 114 | C·ª©u h·ªèa: 114 | C·∫£nh s√°t: 113';
                break;
            case 'heavy-rain':
                safetyInstructions = `
                    <li>Tr√°nh di chuy·ªÉn qua c√°c khu v·ª±c ng·∫≠p l·ª•t</li>
                    <li>Kh√¥ng l√°i xe qua ƒë∆∞·ªùng ng·∫≠p n∆∞·ªõc</li>
                    <li>Gi·ªØ kho·∫£ng c√°ch an to√†n khi l√°i xe tr√™n ƒë∆∞·ªùng tr∆°n tr∆∞·ª£t</li>
                    <li>Chu·∫©n b·ªã c√°c v·∫≠t d·ª•ng ch·ªëng th·∫•m n∆∞·ªõc</li>
                    <li>Theo d√µi c·∫≠p nh·∫≠t v·ªÅ t√¨nh tr·∫°ng ng·∫≠p l·ª•t trong khu v·ª±c</li>
                `;
                emergencyContacts = 'C·ª©u h·ªô: 114 | C·ª©u h·ªèa: 114 | C·∫£nh s√°t: 113';
                break;
            case 'extreme-heat':
                safetyInstructions = `
                    <li>U·ªëng nhi·ªÅu n∆∞·ªõc, tr√°nh ƒë·ªì u·ªëng c√≥ c·ªìn v√† caffeine</li>
                    <li>Tr√°nh ra ngo√†i trong kho·∫£ng th·ªùi gian t·ª´ 11h ƒë·∫øn 15h</li>
                    <li>M·∫∑c qu·∫ßn √°o nh·∫π, r·ªông r√£i v√† m√†u s√°ng</li>
                    <li>S·ª≠ d·ª•ng kem ch·ªëng n·∫Øng khi ra ngo√†i</li>
                    <li>T√¨m n∆°i c√≥ ƒëi·ªÅu h√≤a nhi·ªát ƒë·ªô n·∫øu c√≥ th·ªÉ</li>
                    <li>Ch√∫ √Ω c√°c d·∫•u hi·ªáu say n·∫Øng: ch√≥ng m·∫∑t, bu·ªìn n√¥n, ƒëau ƒë·∫ßu</li>
                `;
                emergencyContacts = 'C·∫•p c·ª©u: 115 | B·ªánh vi·ªán g·∫ßn nh·∫•t';
                break;
            case 'fog':
                safetyInstructions = `
                    <li>Gi·∫£m t·ªëc ƒë·ªô v√† gi·ªØ kho·∫£ng c√°ch an to√†n khi l√°i xe</li>
                    <li>S·ª≠ d·ª•ng ƒë√®n s∆∞∆°ng m√π ho·∫∑c ƒë√®n c·ªët, kh√¥ng d√πng ƒë√®n pha</li>
                    <li>Tr√°nh v∆∞·ª£t xe trong ƒëi·ªÅu ki·ªán t·∫ßm nh√¨n h·∫°n ch·∫ø</li>
                    <li>S·ª≠ d·ª•ng v·∫°ch k·∫ª ƒë∆∞·ªùng l√†m h∆∞·ªõng d·∫´n</li>
                    <li>N·∫øu t·∫ßm nh√¨n qu√° k√©m, h√£y t·∫•p xe v√†o l·ªÅ ƒë∆∞·ªùng an to√†n</li>
                `;
                emergencyContacts = 'C·∫£nh s√°t giao th√¥ng: 113 | C·ª©u h·ªô: 114';
                break;
            default:
                safetyInstructions = `
                    <li>Theo d√µi c√°c c·∫≠p nh·∫≠t th·ªùi ti·∫øt m·ªõi nh·∫•t</li>
                    <li>Chu·∫©n b·ªã s·∫µn s√†ng cho c√°c t√¨nh hu·ªëng kh·∫©n c·∫•p</li>
                    <li>L∆∞u tr·ªØ c√°c s·ªë ƒëi·ªán tho·∫°i kh·∫©n c·∫•p</li>
                `;
                emergencyContacts = 'C·ª©u h·ªô: 114 | C·∫•p c·ª©u: 115 | C·∫£nh s√°t: 113';
        }

        const mailOptions = {
            from: `"Weathery App" <${process.env.EMAIL_USER || 'your-email@gmail.com'}>`,
            to: emailNotification.email || user.email,
            subject: `‚ö†Ô∏è ${alertIcons[alertType]} ${alertTitles[alertType]}: ${alertData.title}`,
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e0e0e0; border-radius: 10px; background-color: #ffffff;">
                    <div style="text-align: center; background-color: #ff6b6b; color: white; padding: 15px; border-radius: 10px 10px 0 0;">
                        <div style="font-size: 36px; margin-bottom: 10px;">${alertIcons[alertType]}</div>
                        <h1 style="margin: 0; font-size: 24px;">${alertTitles[alertType]}</h1>
                    </div>
                    
                    <div style="padding: 20px;">
                        <p style="font-size: 16px;"><strong>Xin ch√†o ${user.displayName},</strong></p>
                        <p style="font-size: 16px;">Ch√∫ng t√¥i ph√°t hi·ªán c√≥ ƒëi·ªÅu ki·ªán th·ªùi ti·∫øt kh·∫Øc nghi·ªát s·∫Øp x·∫£y ra t·∫°i khu v·ª±c c·ªßa b·∫°n:</p>
                        
                        <div style="background-color: #fff8e1; padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #ff6b6b;">
                            <h2 style="margin-top: 0; color: #e74c3c;">${alertData.title}</h2>
                            <p style="font-size: 16px; line-height: 1.5;">${alertData.description}</p>
                            <div style="display: flex; flex-wrap: wrap; margin-top: 15px;">
                                <div style="flex: 1; min-width: 150px; margin-bottom: 10px;">
                                    <p style="margin: 0; font-size: 14px; color: #888;">Th·ªùi gian:</p>
                                    <p style="margin: 5px 0 0; font-weight: bold;">${alertData.time}</p>
                                </div>
                                <div style="flex: 1; min-width: 150px; margin-bottom: 10px;">
                                    <p style="margin: 0; font-size: 14px; color: #888;">Khu v·ª±c:</p>
                                    <p style="margin: 5px 0 0; font-weight: bold;">${alertData.location}</p>
                                </div>
                            </div>
                        </div>
                        
                        <div style="background-color: #f8f9fa; padding: 20px; border-radius: 10px; margin: 20px 0;">
                            <h3 style="color: #2c3e50; border-bottom: 1px solid #e0e0e0; padding-bottom: 10px;">H∆∞·ªõng d·∫´n an to√†n</h3>
                            <ul style="padding-left: 20px; line-height: 1.6;">
                                ${safetyInstructions}
                            </ul>
                        </div>
                        
                        <div style="background-color: #e74c3c; color: white; padding: 15px; border-radius: 10px; text-align: center; margin: 20px 0;">
                            <h3 style="margin-top: 0;">S·ªë ƒëi·ªán tho·∫°i kh·∫©n c·∫•p</h3>
                            <p style="font-size: 16px; margin-bottom: 0;">${emergencyContacts}</p>
                        </div>
                        
                        <div style="text-align: center; margin-top: 30px;">
                            <a href="${config.app.baseUrl}/dubao.html" style="background-color: #3498db; color: white; padding: 12px 25px; text-decoration: none; border-radius: 5px; font-weight: bold; display: inline-block;">Xem d·ª± b√°o chi ti·∫øt</a>
                        </div>
                    </div>
                    
                    <p style="font-size: 12px; color: #888; margin-top: 30px; text-align: center; border-top: 1px solid #e0e0e0; padding-top: 20px;">
                        ƒê√¢y l√† email t·ª± ƒë·ªông t·ª´ ·ª©ng d·ª•ng Weathery. 
                        <a href="${config.app.baseUrl}/thongbao.html" style="color: #3498db;">Thay ƒë·ªïi c√†i ƒë·∫∑t th√¥ng b√°o</a>
                    </p>
                </div>
            `
        };

        await transporter.sendMail(mailOptions);
        console.log(`ƒê√£ g·ª≠i email c·∫£nh b√°o ${alertType} cho ${user.email}`);
    } catch (error) {
        console.error(`L·ªói khi g·ª≠i email c·∫£nh b√°o th·ªùi ti·∫øt cho ${user.email}:`, error);
    }
};

// G·ª≠i b√°o c√°o th·ªùi ti·∫øt h√†ng tu·∫ßn
const sendWeeklyWeatherReport = async (user, weeklyData) => {
    try {
        // T√¨m c√†i ƒë·∫∑t th√¥ng b√°o email c·ªßa ng∆∞·ªùi d√πng
        const emailNotification = await db.EmailNotification.findOne({
            where: { userId: user.id, weeklyEnabled: true }
        });
        
        if (!emailNotification) {
            return;
        }

        // Ph√¢n t√≠ch xu h∆∞·ªõng th·ªùi ti·∫øt trong tu·∫ßn
        const tempAvg = weeklyData.reduce((sum, day) => sum + ((day.tempMin + day.tempMax) / 2), 0) / weeklyData.length;
        const rainDays = weeklyData.filter(day => day.condition.toLowerCase().includes('m∆∞a')).length;
        const sunnyDays = weeklyData.filter(day => day.condition.toLowerCase().includes('n·∫Øng') || day.condition.toLowerCase().includes('quang')).length;
        const hotDays = weeklyData.filter(day => day.tempMax > 35).length;
        const coldDays = weeklyData.filter(day => day.tempMin < 15).length;

        // T·∫°o t√≥m t·∫Øt tu·∫ßn
        let weeklySummary = '';
        if (rainDays >= 4) {
            weeklySummary = 'Tu·∫ßn n√†y c√≥ nhi·ªÅu m∆∞a, h√£y chu·∫©n b·ªã √¥ v√† √°o m∆∞a khi ra ngo√†i.';
        } else if (sunnyDays >= 4) {
            weeklySummary = 'Tu·∫ßn n√†y ch·ªß y·∫øu l√† n·∫Øng ƒë·∫πp, th√≠ch h·ª£p cho c√°c ho·∫°t ƒë·ªông ngo√†i tr·ªùi.';
        } else if (hotDays >= 3) {
            weeklySummary = 'Tu·∫ßn n√†y c√≥ nhi·ªÅu ng√†y n·∫Øng n√≥ng, h√£y u·ªëng ƒë·ªß n∆∞·ªõc v√† tr√°nh ra ngo√†i v√†o gi·ªù cao ƒëi·ªÉm.';
        } else if (coldDays >= 3) {
            weeklySummary = 'Tu·∫ßn n√†y c√≥ nhi·ªÅu ng√†y l·∫°nh, nh·ªõ m·∫∑c ƒë·ªß ·∫•m khi ra ngo√†i.';
        } else {
            weeklySummary = 'Tu·∫ßn n√†y th·ªùi ti·∫øt kh√° ƒëa d·∫°ng, h√£y theo d√µi d·ª± b√°o h√†ng ng√†y ƒë·ªÉ chu·∫©n b·ªã t·ªët nh·∫•t.';
        }

        // T·∫°o g·ª£i √Ω ho·∫°t ƒë·ªông cho tu·∫ßn
        let activitySuggestions = '';
        if (rainDays <= 2 && sunnyDays >= 3) {
            activitySuggestions = `
                <li>ƒêi d√£ ngo·∫°i ho·∫∑c picnic v√†o cu·ªëi tu·∫ßn</li>
                <li>T·ªï ch·ª©c c√°c ho·∫°t ƒë·ªông ngo√†i tr·ªùi nh∆∞ ƒë·∫°p xe, ch·∫°y b·ªô</li>
                <li>ThƒÉm c√°c c√¥ng vi√™n ho·∫∑c khu du l·ªãch sinh th√°i</li>
            `;
        } else if (rainDays >= 4) {
            activitySuggestions = `
                <li>Tham quan b·∫£o t√†ng ho·∫∑c trung t√¢m mua s·∫Øm</li>
                <li>Th∆∞·ªüng th·ª©c phim t·∫°i r·∫°p ho·∫∑c t·∫°i nh√†</li>
                <li>Gh√© thƒÉm c√°c qu√°n c√† ph√™, nh√† h√†ng c√≥ kh√¥ng gian ·∫•m c√∫ng</li>
            `;
        } else if (hotDays >= 3) {
            activitySuggestions = `
                <li>ƒêi b∆°i ho·∫∑c tham quan c√°c khu vui ch∆°i c√≥ h·ªì b∆°i</li>
                <li>Th∆∞·ªüng th·ª©c kem ho·∫∑c ƒë·ªì u·ªëng m√°t l·∫°nh t·∫°i c√°c qu√°n c√† ph√™</li>
                <li>Tham quan c√°c trung t√¢m th∆∞∆°ng m·∫°i c√≥ ƒëi·ªÅu h√≤a</li>
            `;
        } else if (coldDays >= 3) {
            activitySuggestions = `
                <li>Th∆∞·ªüng th·ª©c ƒë·ªì u·ªëng n√≥ng t·∫°i c√°c qu√°n c√† ph√™</li>
                <li>Tham quan c√°c nh√† h√†ng v·ªõi m√≥n ƒÉn n√≥ng h·ªïi</li>
                <li>T·ªï ch·ª©c h·ªçp m·∫∑t gia ƒë√¨nh ho·∫∑c b·∫°n b√® trong nh√†</li>
            `;
        } else {
            activitySuggestions = `
                <li>C√¢n nh·∫Øc c√°c ho·∫°t ƒë·ªông linh ho·∫°t c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh theo th·ªùi ti·∫øt</li>
                <li>Chu·∫©n b·ªã c·∫£ ph∆∞∆°ng √°n trong nh√† v√† ngo√†i tr·ªùi</li>
                <li>Theo d√µi d·ª± b√°o th·ªùi ti·∫øt h√†ng ng√†y ƒë·ªÉ l√™n k·∫ø ho·∫°ch ph√π h·ª£p</li>
            `;
        }

        // T·∫°o bi·ªÉu t∆∞·ª£ng th·ªùi ti·∫øt cho m·ªói ng√†y
        const getWeatherIcon = (condition) => {
            const conditionLower = condition.toLowerCase();
            if (conditionLower.includes('m∆∞a')) return 'üåßÔ∏è';
            if (conditionLower.includes('n·∫Øng')) return '‚òÄÔ∏è';
            if (conditionLower.includes('m√¢y') || conditionLower.includes('r√¢m')) return '‚õÖ';
            if (conditionLower.includes('gi√¥ng') || conditionLower.includes('s·∫•m')) return '‚õàÔ∏è';
            if (conditionLower.includes('tuy·∫øt')) return '‚ùÑÔ∏è';
            if (conditionLower.includes('s∆∞∆°ng m√π')) return 'üå´Ô∏è';
            return 'üå§Ô∏è'; // M·∫∑c ƒë·ªãnh
        };

        // T·∫°o m√†u s·∫Øc d·ª±a tr√™n nhi·ªát ƒë·ªô
        const getTempColor = (temp) => {
            if (temp >= 35) return '#FF5733'; // ƒê·ªè n√≥ng
            if (temp >= 30) return '#FF9933'; // Cam n√≥ng
            if (temp >= 25) return '#FFCC33'; // V√†ng ·∫•m
            if (temp >= 20) return '#33CC33'; // Xanh l√° d·ªÖ ch·ªãu
            if (temp >= 15) return '#33CCCC'; // Xanh d∆∞∆°ng m√°t
            if (temp >= 10) return '#3399FF'; // Xanh d∆∞∆°ng l·∫°nh
            return '#3366FF'; // Xanh d∆∞∆°ng r·∫•t l·∫°nh
        };

        const mailOptions = {
            from: `"Weathery App" <${process.env.EMAIL_USER || 'your-email@gmail.com'}>`,
            to: emailNotification.email || user.email,
            subject: `üìä B√°o c√°o th·ªùi ti·∫øt tu·∫ßn n√†y - Weathery`,
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e0e0e0; border-radius: 10px; background-color: #ffffff;">
                    <div style="text-align: center; background-color: #4a90e2; color: white; padding: 20px; border-radius: 10px 10px 0 0;">
                        <h1 style="margin: 0; font-size: 24px;">üìä B√ÅO C√ÅO TH·ªúI TI·∫æT TU·∫¶N N√ÄY</h1>
                        <p style="margin: 10px 0 0;">D·ª± b√°o 7 ng√†y t·ªõi cho khu v·ª±c c·ªßa b·∫°n</p>
                    </div>
                    
                    <div style="padding: 20px;">
                        <p style="font-size: 16px;"><strong>Xin ch√†o ${user.displayName},</strong></p>
                        
                        <div style="background-color: #f0f7ff; padding: 15px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #4a90e2;">
                            <h3 style="margin-top: 0; color: #2c3e50;">T√≥m t·∫Øt tu·∫ßn</h3>
                            <p style="font-size: 16px; line-height: 1.5;">${weeklySummary}</p>
                        </div>
                        
                        <h3 style="color: #2c3e50; border-bottom: 1px solid #e0e0e0; padding-bottom: 10px;">D·ª± b√°o 7 ng√†y t·ªõi</h3>
                        
                        <div style="background-color: #f9f9f9; padding: 15px; border-radius: 10px; margin: 15px 0;">
                            ${weeklyData.map(day => `
                                <div style="margin-bottom: 15px; padding: 15px; border-radius: 8px; background-color: white; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
                                    <div style="display: flex; justify-content: space-between; align-items: center;">
                                        <h3 style="margin: 0; color: #2c3e50;">${day.date}</h3>
                                        <div style="font-size: 24px;">${getWeatherIcon(day.condition)}</div>
                                    </div>
                                    <p style="margin: 10px 0; font-size: 15px;">${day.condition}</p>
                                    <div style="display: flex; align-items: center; margin-top: 10px;">
                                        <span style="color: ${getTempColor(day.tempMin)}; font-weight: bold;">${day.tempMin}¬∞C</span>
                                        <div style="flex-grow: 1; height: 4px; background: linear-gradient(to right, ${getTempColor(day.tempMin)}, ${getTempColor(day.tempMax)}); margin: 0 10px; border-radius: 2px;"></div>
                                        <span style="color: ${getTempColor(day.tempMax)}; font-weight: bold;">${day.tempMax}¬∞C</span>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                        
                        <div style="background-color: #f5f5f5; padding: 20px; border-radius: 10px; margin: 20px 0;">
                            <h3 style="color: #2c3e50; border-bottom: 1px solid #e0e0e0; padding-bottom: 10px;">G·ª£i √Ω ho·∫°t ƒë·ªông cho tu·∫ßn n√†y</h3>
                            <ul style="padding-left: 20px; line-height: 1.6;">
                                ${activitySuggestions}
                            </ul>
                        </div>
                        
                        <div style="text-align: center; margin-top: 30px;">
                            <a href="${config.app.baseUrl}/dubao.html" style="background-color: #4a90e2; color: white; padding: 12px 25px; text-decoration: none; border-radius: 5px; font-weight: bold; display: inline-block;">Xem d·ª± b√°o chi ti·∫øt</a>
                        </div>
                    </div>
                    
                    <p style="font-size: 12px; color: #888; margin-top: 30px; text-align: center; border-top: 1px solid #e0e0e0; padding-top: 20px;">
                        ƒê√¢y l√† email t·ª± ƒë·ªông t·ª´ ·ª©ng d·ª•ng Weathery. 
                        <a href="${config.app.baseUrl}/thongbao.html" style="color: #4a90e2;">Thay ƒë·ªïi c√†i ƒë·∫∑t th√¥ng b√°o</a>
                    </p>
                </div>
            `
        };

        await transporter.sendMail(mailOptions);
        console.log(`ƒê√£ g·ª≠i email b√°o c√°o h√†ng tu·∫ßn cho ${user.email}`);
    } catch (error) {
        console.error(`L·ªói khi g·ª≠i email b√°o c√°o h√†ng tu·∫ßn cho ${user.email}:`, error);
    }
};

// L√™n l·ªãch g·ª≠i th√¥ng b√°o email
const scheduleDailyNotifications = async () => {
    try {
        // Ki·ªÉm tra k·∫øt n·ªëi email tr∆∞·ªõc
        const isEmailConnected = await verifyEmailConnection();
        if (!isEmailConnected) {
            if (process.env.NODE_ENV !== 'production') {
                console.error('Kh√¥ng th·ªÉ l√™n l·ªãch th√¥ng b√°o email h√†ng ng√†y do l·ªói k·∫øt n·ªëi.');
            }
            return;
        }

        // H·ªßy t·∫•t c·∫£ c√°c l·ªãch hi·ªán t·∫°i
        Object.keys(schedule.scheduledJobs).forEach(jobName => {
            if (jobName.startsWith('email-notification-daily-')) {
                schedule.cancelJob(jobName);
            }
        });

        // L·∫•y t·∫•t c·∫£ c√†i ƒë·∫∑t th√¥ng b√°o email h√†ng ng√†y ƒë√£ b·∫≠t
        const notifications = await db.EmailNotification.findAll({
            where: { dailyEnabled: true },
            include: [{ model: db.User, as: 'user' }]
        });
        
        notifications.forEach(notification => {
            const userId = notification.userId;
            const [hour, minute] = notification.dailyTime.split(':');
            const rule = new schedule.RecurrenceRule();
            rule.hour = parseInt(hour);
            rule.minute = parseInt(minute);
            
            // X√°c ƒë·ªãnh ng√†y trong tu·∫ßn d·ª±a tr√™n frequency
            if (notification.dailyFrequency === 'weekdays') {
                rule.dayOfWeek = [1, 2, 3, 4, 5]; // Th·ª© 2 ƒë·∫øn th·ª© 6
            } else if (notification.dailyFrequency === 'weekends') {
                rule.dayOfWeek = [0, 6]; // Ch·ªß nh·∫≠t v√† th·ª© 7
            }
            // N·∫øu frequency l√† 'daily' th√¨ kh√¥ng c·∫ßn thi·∫øt l·∫≠p dayOfWeek

            schedule.scheduleJob(`email-notification-daily-${userId}`, rule, async () => {
                // Gi·∫£ l·∫≠p d·ªØ li·ªáu th·ªùi ti·∫øt (trong th·ª±c t·∫ø s·∫Ω l·∫•y t·ª´ API)
                const weatherData = {
                    temperature: Math.floor(Math.random() * 15) + 20, // 20-35¬∞C
                    condition: ['N·∫Øng', 'M√¢y r·∫£i r√°c', 'C√≥ m√¢y', 'M∆∞a nh·∫π'][Math.floor(Math.random() * 4)],
                    humidity: Math.floor(Math.random() * 30) + 50, // 50-80%
                    wind: Math.floor(Math.random() * 20) + 5 // 5-25 km/h
                };
                await sendDailyWeatherEmail(notification.user, weatherData);
            });
            
            console.log(`ƒê√£ l√™n l·ªãch th√¥ng b√°o h√†ng ng√†y cho ng∆∞·ªùi d√πng ${userId} v√†o l√∫c ${notification.dailyTime} (${notification.dailyFrequency})`);
        });

        if (process.env.NODE_ENV !== 'production') {
            console.log(`ƒê√£ l√™n l·ªãch ${notifications.length} th√¥ng b√°o email h√†ng ng√†y.`);
        }
    } catch (error) {
        console.error('L·ªói khi l√™n l·ªãch th√¥ng b√°o email h√†ng ng√†y:', error);
    }
};

// L√™n l·ªãch b√°o c√°o h√†ng tu·∫ßn
const scheduleWeeklyReports = async () => {
    try {
        // Ki·ªÉm tra k·∫øt n·ªëi email tr∆∞·ªõc
        const isEmailConnected = await verifyEmailConnection();
        if (!isEmailConnected) {
            console.error('Kh√¥ng th·ªÉ l√™n l·ªãch b√°o c√°o h√†ng tu·∫ßn do l·ªói k·∫øt n·ªëi.');
            return;
        }

        // H·ªßy t·∫•t c·∫£ c√°c l·ªãch hi·ªán t·∫°i
        Object.keys(schedule.scheduledJobs).forEach(jobName => {
            if (jobName.startsWith('email-notification-weekly-')) {
                schedule.cancelJob(jobName);
            }
        });

        // L·∫•y t·∫•t c·∫£ c√†i ƒë·∫∑t b√°o c√°o h√†ng tu·∫ßn ƒë√£ b·∫≠t
        const notifications = await db.EmailNotification.findAll({
            where: { weeklyEnabled: true },
            include: [{ model: db.User, as: 'user' }]
        });
        
        notifications.forEach(notification => {
            const userId = notification.userId;
            const [hour, minute] = notification.weeklyTime.split(':');
            const rule = new schedule.RecurrenceRule();
            rule.hour = parseInt(hour);
            rule.minute = parseInt(minute);
            rule.dayOfWeek = notification.weeklyDay;

            schedule.scheduleJob(`email-notification-weekly-${userId}`, rule, async () => {
                // Gi·∫£ l·∫≠p d·ªØ li·ªáu th·ªùi ti·∫øt h√†ng tu·∫ßn (trong th·ª±c t·∫ø s·∫Ω l·∫•y t·ª´ API)
                const weeklyData = [];
                const today = new Date();
                
                for (let i = 0; i < 7; i++) {
                    const date = new Date(today);
                    date.setDate(today.getDate() + i);
                    
                    weeklyData.push({
                        date: date.toLocaleDateString('vi-VN', { weekday: 'long', month: 'numeric', day: 'numeric' }),
                        condition: ['N·∫Øng', 'M√¢y r·∫£i r√°c', 'C√≥ m√¢y', 'M∆∞a nh·∫π', 'M∆∞a v·ª´a'][Math.floor(Math.random() * 5)],
                        tempMin: Math.floor(Math.random() * 10) + 18, // 18-28¬∞C
                        tempMax: Math.floor(Math.random() * 10) + 25 // 25-35¬∞C
                    });
                }
                
                await sendWeeklyWeatherReport(notification.user, weeklyData);
            });
            
            console.log(`ƒê√£ l√™n l·ªãch b√°o c√°o h√†ng tu·∫ßn cho ng∆∞·ªùi d√πng ${userId} v√†o th·ª© ${notification.weeklyDay + 1} l√∫c ${notification.weeklyTime}`);
        });

        if (process.env.NODE_ENV !== 'production') {
            console.log(`ƒê√£ l√™n l·ªãch ${notifications.length} b√°o c√°o email h√†ng tu·∫ßn.`);
        }
    } catch (error) {
        console.error('L·ªói khi l√™n l·ªãch b√°o c√°o email h√†ng tu·∫ßn:', error);
    }
};

// L√™n l·ªãch t·∫•t c·∫£ c√°c th√¥ng b√°o email
const scheduleEmailNotifications = async () => {
    try {
        await scheduleDailyNotifications();
        await scheduleWeeklyReports();
        if (process.env.NODE_ENV !== 'production') {
            console.log('ƒê√£ l√™n l·ªãch t·∫•t c·∫£ c√°c th√¥ng b√°o email th√†nh c√¥ng.');
        }
    } catch (error) {
        console.error('L·ªói khi l√™n l·ªãch th√¥ng b√°o email:', error);
    }
};

// Gi·∫£ l·∫≠p g·ª≠i c·∫£nh b√°o th·ªùi ti·∫øt kh·∫Øc nghi·ªát (cho m·ª•c ƒë√≠ch demo)
const simulateSevereWeatherAlert = async () => {
    try {
        // L·∫•y t·∫•t c·∫£ c√†i ƒë·∫∑t th√¥ng b√°o ƒë√£ b·∫≠t c·∫£nh b√°o th·ªùi ti·∫øt kh·∫Øc nghi·ªát
        const notifications = await db.EmailNotification.findAll({
            where: { severeWeatherEnabled: true },
            include: [{ model: db.User, as: 'user' }]
        });
        
        const alertTypes = ['storm', 'heavy-rain', 'extreme-heat', 'fog'];
        const randomAlertType = alertTypes[Math.floor(Math.random() * alertTypes.length)];
        
        const alertData = {
            type: randomAlertType,
            title: `C·∫£nh b√°o ${randomAlertType === 'storm' ? 'b√£o' : 
                              randomAlertType === 'heavy-rain' ? 'm∆∞a l·ªõn' : 
                              randomAlertType === 'extreme-heat' ? 'n·∫Øng n√≥ng' : 's∆∞∆°ng m√π'}`,
            description: `D·ª± b√°o c√≥ ${randomAlertType === 'storm' ? 'b√£o m·∫°nh' : 
                                    randomAlertType === 'heavy-rain' ? 'm∆∞a l·ªõn k√©o d√†i' : 
                                    randomAlertType === 'extreme-heat' ? 'n·∫Øng n√≥ng gay g·∫Øt' : 's∆∞∆°ng m√π d√†y ƒë·∫∑c'} trong khu v·ª±c c·ªßa b·∫°n.`,
            time: new Date().toLocaleString('vi-VN'),
            location: 'Khu v·ª±c c·ªßa b·∫°n'
        };
        
        let sentCount = 0;
        for (const notification of notifications) {
            // Ki·ªÉm tra xem lo·∫°i c·∫£nh b√°o c√≥ ƒë∆∞·ª£c b·∫≠t kh√¥ng
            const alertTypes = notification.severeWeatherTypes || [];
            if (alertTypes.includes(randomAlertType)) {
                await sendSevereWeatherAlert(notification.user, alertData);
                sentCount++;
            }
        }
        
        if (process.env.NODE_ENV !== 'production') {
            console.log(`ƒê√£ g·ª≠i c·∫£nh b√°o ${randomAlertType} cho ${sentCount} ng∆∞·ªùi d√πng.`);
        }
    } catch (error) {
        console.error('L·ªói khi g·ª≠i c·∫£nh b√°o th·ªùi ti·∫øt kh·∫Øc nghi·ªát:', error);
    }
};

// C·∫≠p nh·∫≠t l·ªãch th√¥ng b√°o email cho m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ
const updateUserEmailSchedule = async (userId) => {
    try {
        // H·ªßy c√°c l·ªãch hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
        Object.keys(schedule.scheduledJobs).forEach(jobName => {
            if (jobName === `email-notification-daily-${userId}` || jobName === `email-notification-weekly-${userId}`) {
                schedule.cancelJob(jobName);
            }
        });

        // L·∫•y c√†i ƒë·∫∑t th√¥ng b√°o email c·ªßa ng∆∞·ªùi d√πng
        const notification = await db.EmailNotification.findOne({
            where: { userId },
            include: [{ model: db.User, as: 'user' }]
        });

        if (!notification) {
            if (process.env.NODE_ENV !== 'production') {
                console.log(`Kh√¥ng t√¨m th·∫•y c√†i ƒë·∫∑t th√¥ng b√°o email cho ng∆∞·ªùi d√πng ${userId}`);
            }
            return;
        }

        // L√™n l·ªãch th√¥ng b√°o h√†ng ng√†y n·∫øu ƒë∆∞·ª£c b·∫≠t
        if (notification.dailyEnabled) {
            const [hour, minute] = notification.dailyTime.split(':');
            const rule = new schedule.RecurrenceRule();
            rule.hour = parseInt(hour);
            rule.minute = parseInt(minute);
            
            // X√°c ƒë·ªãnh ng√†y trong tu·∫ßn d·ª±a tr√™n frequency
            if (notification.dailyFrequency === 'weekdays') {
                rule.dayOfWeek = [1, 2, 3, 4, 5]; // Th·ª© 2 ƒë·∫øn th·ª© 6
            } else if (notification.dailyFrequency === 'weekends') {
                rule.dayOfWeek = [0, 6]; // Ch·ªß nh·∫≠t v√† th·ª© 7
            }

            schedule.scheduleJob(`email-notification-daily-${userId}`, rule, async () => {
                // Gi·∫£ l·∫≠p d·ªØ li·ªáu th·ªùi ti·∫øt (trong th·ª±c t·∫ø s·∫Ω l·∫•y t·ª´ API)
                const weatherData = {
                    temperature: Math.floor(Math.random() * 15) + 20, // 20-35¬∞C
                    condition: ['N·∫Øng', 'M√¢y r·∫£i r√°c', 'C√≥ m√¢y', 'M∆∞a nh·∫π'][Math.floor(Math.random() * 4)],
                    humidity: Math.floor(Math.random() * 30) + 50, // 50-80%
                    wind: Math.floor(Math.random() * 20) + 5 // 5-25 km/h
                };
                await sendDailyWeatherEmail(notification.user, weatherData);
            });
            
            if (process.env.NODE_ENV !== 'production') {
                console.log(`ƒê√£ c·∫≠p nh·∫≠t l·ªãch th√¥ng b√°o h√†ng ng√†y cho ng∆∞·ªùi d√πng ${userId} v√†o l√∫c ${notification.dailyTime} (${notification.dailyFrequency})`);
            }
        }

        // L√™n l·ªãch b√°o c√°o h√†ng tu·∫ßn n·∫øu ƒë∆∞·ª£c b·∫≠t
        if (notification.weeklyEnabled) {
            const [hour, minute] = notification.weeklyTime.split(':');
            const rule = new schedule.RecurrenceRule();
            rule.hour = parseInt(hour);
            rule.minute = parseInt(minute);
            rule.dayOfWeek = notification.weeklyDay;

            schedule.scheduleJob(`email-notification-weekly-${userId}`, rule, async () => {
                // Gi·∫£ l·∫≠p d·ªØ li·ªáu th·ªùi ti·∫øt h√†ng tu·∫ßn (trong th·ª±c t·∫ø s·∫Ω l·∫•y t·ª´ API)
                const weeklyData = [];
                const today = new Date();
                
                for (let i = 0; i < 7; i++) {
                    const date = new Date(today);
                    date.setDate(today.getDate() + i);
                    
                    weeklyData.push({
                        date: date.toLocaleDateString('vi-VN', { weekday: 'long', month: 'numeric', day: 'numeric' }),
                        condition: ['N·∫Øng', 'M√¢y r·∫£i r√°c', 'C√≥ m√¢y', 'M∆∞a nh·∫π', 'M∆∞a v·ª´a'][Math.floor(Math.random() * 5)],
                        tempMin: Math.floor(Math.random() * 10) + 18, // 18-28¬∞C
                        tempMax: Math.floor(Math.random() * 10) + 25 // 25-35¬∞C
                    });
                }
                
                await sendWeeklyWeatherReport(notification.user, weeklyData);
            });
            
            if (process.env.NODE_ENV !== 'production') {
                console.log(`ƒê√£ c·∫≠p nh·∫≠t l·ªãch b√°o c√°o h√†ng tu·∫ßn cho ng∆∞·ªùi d√πng ${userId} v√†o th·ª© ${notification.weeklyDay + 1} l√∫c ${notification.weeklyTime}`);
            }
        }

        return true;
    } catch (error) {
        console.error(`L·ªói khi c·∫≠p nh·∫≠t l·ªãch th√¥ng b√°o email cho ng∆∞·ªùi d√πng ${userId}:`, error);
        return false;
    }
};

module.exports = {
    verifyEmailConnection,
    sendDailyWeatherEmail,
    sendSevereWeatherAlert,
    sendWeeklyWeatherReport,
    scheduleEmailNotifications,
    simulateSevereWeatherAlert,
    updateUserEmailSchedule
};